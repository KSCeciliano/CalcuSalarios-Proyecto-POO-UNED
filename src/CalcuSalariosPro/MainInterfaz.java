package CalcuSalariosPro;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel; //Para crear un modelo de tabla por defecto.
import javax.swing.JOptionPane;//para mostrar mensajes emergentes al usuario.
import javax.swing.UIManager;//para establecer el estilo visual de la aplicaci칩n.
import java.time.LocalDate;
import java.awt.Toolkit;//para acceder a la pantalla y establecer la posici칩n de la ventana.
import java.time.format.DateTimeFormatter; //para formatear fechas
import java.time.format.DateTimeParseException;//para manejar excepciones de fechas.
import javax.swing.ImageIcon;//para manejar im치genes en la aplicaci칩n. (icon.png)

public class MainInterfaz extends javax.swing.JFrame {

    ArrayList<Salario> listaSalario;
    ArchivoSalarios archivoSalarios;

    ArrayList<cEmpleado> listaEmpleados;
    ArchivoEmpleados archivoEmpleados;

    cEmpleado tmpEmpleado;

    Validaciones vali;

    public MainInterfaz() {
        archivoSalarios = new ArchivoSalarios("salarios.txt");

        archivoEmpleados = new ArchivoEmpleados("empleados.txt");

        cargarDatosArchivo();

        vali = new Validaciones();

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<String>();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<String>();
        jComboBox3 = new javax.swing.JComboBox<String>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel15 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jComboBox4 = new javax.swing.JComboBox<String>();
        jComboBox5 = new javax.swing.JComboBox<String>();
        jComboBox6 = new javax.swing.JComboBox<String>();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setFocusable(false);
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });
        jTabbedPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTabbedPane1ComponentShown(evt);
            }
        });

        //Cargar los empleados
        //ArchivoEmpleados archivoEmpleados = new ArchivoEmpleados("empleadosprueba.txt");

        // Leer los datos del archivo y almacenarlos en una lista de objetos Empleado
        //ArrayList<cEmpleado> listaEmpleados = archivoEmpleados.cargarEmpleados();

        // Crear un modelo de tabla
        DefaultTableModel modeloTablaEmpleados = new DefaultTableModel();

        // Agregar las columnas al modelo de tabla
        modeloTablaEmpleados.addColumn("Id Empleado");
        modeloTablaEmpleados.addColumn("Nombre");
        modeloTablaEmpleados.addColumn("Apellidos");
        modeloTablaEmpleados.addColumn("Edad");
        modeloTablaEmpleados.addColumn("Puesto");
        modeloTablaEmpleados.addColumn("Fecha Ingreso");

        // Agregar las filas al modelo de tabla
        // Cargar los datos de los empleados en la tabla
        for (cEmpleado empleado : listaEmpleados) {
            Object[] fila = new Object[6];
            fila[0] = empleado.getIdEmpleado();
            fila[1] = empleado.getNombre();
            fila[2] = empleado.getApellidos();
            fila[3] = empleado.getEdad();
            fila[4] = empleado.getPuestoDesempenado();
            fila[5] = empleado.getFechaIngreso().toString();
            modeloTablaEmpleados.addRow(fila);
        }
        jTable1.setModel(modeloTablaEmpleados);
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setText("ID Empleado:");

        jLabel6.setText("Nombre:");

        jLabel7.setText("Apellidos");

        jLabel8.setText("Edad:");

        jLabel9.setText("Puesto:");

        jLabel10.setText("Fecha de Ingreso:");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton1.setText("Agregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Modificar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Buscar ID");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Borrar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Open Sans", 0, 13)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setFocusable(false);
        jTextArea1.setOpaque(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabel11.setText("Logs");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton4)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Empleados", jPanel2);

        jLabel1.setText("ID Empleado:");

        jLabel2.setText("Salario bruto:");

        jCheckBox1.setText("Asociaci칩n Solidarista");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("Cooperativa");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Ahorro Navide침o (%):");

        jLabel5.setText("Otros Rebajos:");

        jTextField1.setToolTipText("Ingrese un ID 칰nico");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "1", "2" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel12.setText("Planilla:");

        jLabel13.setText("Mes:");

        jLabel14.setText("A침o:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "2022", "2023", "2024" }));

        //Cargar los empleados
        //ArchivoSalarios archivoSalarios = new ArchivoSalarios("salariosprueba.txt");

        // Leer los datos del archivo y almacenarlos en una lista de objetos Empleado
        //ArrayList<Salario> listaSalario = archivoSalarios.cargarSalarios();

        // Crear un modelo de tabla
        DefaultTableModel modeloTablaSalarios = new DefaultTableModel();

        // Agregar las columnas al modelo de tabla
        modeloTablaSalarios.addColumn("Id Empleado");
        modeloTablaSalarios.addColumn("Salario Bruto");
        modeloTablaSalarios.addColumn("CCSS 5.5%");
        modeloTablaSalarios.addColumn("BP 1%");
        modeloTablaSalarios.addColumn("Impuesto");
        modeloTablaSalarios.addColumn("Ahorro Aso. 3%");
        modeloTablaSalarios.addColumn("Cooperativa 1%");
        modeloTablaSalarios.addColumn("% Navide침o");
        modeloTablaSalarios.addColumn("Otros Rebajos");
        modeloTablaSalarios.addColumn("Salario Neto");
        modeloTablaSalarios.addColumn("Planilla");
        modeloTablaSalarios.addColumn("Mes/A침o");

        // Agregar las filas al modelo de tabla
        // Cargar los datos de los empleados en la tabla
        for (Salario sa : listaSalario) {
            Object[] fila = new Object[12];
            fila[0] = sa.getIdEmpleado();
            fila[1] = sa.getObjSalario().getSalarioBruto();
            fila[2] = sa.getObjSalario().getDeduccionCuotaSS();
            fila[3] = sa.getObjSalario().getDeduccionAhorroBP();
            fila[4] = sa.getObjSalario().getDeduccionImpuestoRenta();
            fila[5] = sa.getObjSalario().getAsociacionSolidarista();
            fila[6] = sa.getObjSalario().getCooperativa();
            fila[7] = sa.getObjSalario().getAhorroNavideno();
            fila[8] = sa.getObjSalario().getOtrosRebajos();
            fila[9] = sa.getObjSalario().getSalarioNeto();
            fila[10] = sa.getNumPlanilla();
            fila[11] = sa.getMes() + "/" +sa.getAnio();
            modeloTablaSalarios.addRow(fila);
        }
        jTable2.setModel(modeloTablaSalarios);
        jScrollPane4.setViewportView(jTable2);

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Open Sans", 0, 13)); // NOI18N
        jTextArea3.setRows(5);
        jTextArea3.setOpaque(false);
        jScrollPane5.setViewportView(jTextArea3);

        jLabel15.setText("Logs");

        jButton6.setText("Agregar salario");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField5)
                                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jTextField2)
                                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(8, 8, 8)
                                                .addComponent(jCheckBox2)))
                                        .addGap(64, 64, 64)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jComboBox2, 0, 66, Short.MAX_VALUE)
                                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addComponent(jButton6)
                        .addGap(35, 35, 35))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Calculadora de Salario", jPanel1);

        jLabel16.setText("ID Empleado:");

        jTextField11.setToolTipText("Ingrese un ID 칰nico");

        jButton5.setText("Mostrar Reporte");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        //Cargar los empleados
        //ArchivoSalarios archivoSalarioss = new ArchivoSalarios("salaritosss.txt");

        // Leer los datos del archivo y almacenarlos en una lista de objetos Empleado
        //ArrayList<Salario> listaSalarios = archivoSalarioss.obtenerSalariosDePrueba();

        // Crear un modelo de tabla
        DefaultTableModel modeloReporteSalarios = new DefaultTableModel();

        //ID solicitado
        int idSolicitado = 212121;

        // Agregar las columnas al modelo de tabla
        modeloReporteSalarios.addColumn("Id Empleado");
        modeloReporteSalarios.addColumn("Salario Bruto");
        modeloReporteSalarios.addColumn("CCSS 5.5%");
        modeloReporteSalarios.addColumn("BP 1%");
        modeloReporteSalarios.addColumn("Impuesto");
        modeloReporteSalarios.addColumn("Ahorro Aso. 3%");
        modeloReporteSalarios.addColumn("Cooperativa 1%");
        modeloReporteSalarios.addColumn("% Navide침o");
        modeloReporteSalarios.addColumn("Otros Rebajos");
        modeloReporteSalarios.addColumn("Salario Neto");
        modeloReporteSalarios.addColumn("Planilla");
        modeloReporteSalarios.addColumn("Mes/A침o");

        // Agregar las filas al modelo de tabla
        // Cargar los datos de los empleados en la tabla
        for (Salario sa : listaSalario) {
            if (sa.getIdEmpleado()==idSolicitado){
                Object[] fila = new Object[12];
                fila[0] = sa.getIdEmpleado();
                fila[1] = sa.getObjSalario().getSalarioBruto();
                fila[2] = sa.getObjSalario().getDeduccionCuotaSS();
                fila[3] = sa.getObjSalario().getDeduccionAhorroBP();
                fila[4] = sa.getObjSalario().getDeduccionImpuestoRenta();
                fila[5] = sa.getObjSalario().getAsociacionSolidarista();
                fila[6] = sa.getObjSalario().getCooperativa();
                fila[7] = sa.getObjSalario().getAhorroNavideno();
                fila[8] = sa.getObjSalario().getOtrosRebajos();
                fila[9] = sa.getObjSalario().getSalarioNeto();
                fila[10] = sa.getNumPlanilla();
                fila[11] = sa.getMes() + "/" +sa.getAnio();
                modeloReporteSalarios.addRow(fila);
            }

        }
        jTable3.setModel(modeloReporteSalarios);
        jScrollPane6.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Reporte de planillas por empleado", jPanel4);

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "1", "2" }));
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "2022", "2023", "2024" }));

        jLabel17.setText("A침o:");

        jLabel18.setText("Mes:");

        jLabel19.setText("Planilla:");

        jButton7.setText("Mostrar Reporte");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        //Cargar los empleados
        //ArchivoSalarios archivoSalariosss = new ArchivoSalarios("salaritossss.txt");

        // Leer los datos del archivo y almacenarlos en una lista de objetos Empleado
        //ArrayList<Salario> listaSalariosss = archivoSalariosss.obtenerSalariosDePrueba();

        // Crear un modelo de tabla
        DefaultTableModel modeloReportePlanilla = new DefaultTableModel();

        //solicitado
        int planillaSoli = 0;
        int mesSoli = 0;
        int anioSoli = 0;

        // Agregar las columnas al modelo de tabla
        modeloReportePlanilla.addColumn("Id Empleado");
        modeloReportePlanilla.addColumn("Salario Bruto");
        modeloReportePlanilla.addColumn("CCSS 5.5%");
        modeloReportePlanilla.addColumn("BP 1%");
        modeloReportePlanilla.addColumn("Impuesto");
        modeloReportePlanilla.addColumn("Ahorro Aso. 3%");
        modeloReportePlanilla.addColumn("Cooperativa 1%");
        modeloReportePlanilla.addColumn("% Navide침o");
        modeloReportePlanilla.addColumn("Otros Rebajos");
        modeloReportePlanilla.addColumn("Salario Neto");
        modeloReportePlanilla.addColumn("Planilla");
        modeloReportePlanilla.addColumn("Mes/A침o");

        // Agregar las filas al modelo de tabla
        // Cargar los datos de los empleados en la tabla
        for (Salario sa : listaSalario) {
            if ((sa.getNumPlanilla()==planillaSoli) && (sa.getMes()==mesSoli) && (sa.getAnio()==anioSoli)) {
                Object[] fila = new Object[12];
                fila[0] = sa.getIdEmpleado();
                fila[1] = sa.getObjSalario().getSalarioBruto();
                fila[2] = sa.getObjSalario().getDeduccionCuotaSS();
                fila[3] = sa.getObjSalario().getDeduccionAhorroBP();
                fila[4] = sa.getObjSalario().getDeduccionImpuestoRenta();
                fila[5] = sa.getObjSalario().getAsociacionSolidarista();
                fila[6] = sa.getObjSalario().getCooperativa();
                fila[7] = sa.getObjSalario().getAhorroNavideno();
                fila[8] = sa.getObjSalario().getOtrosRebajos();
                fila[9] = sa.getObjSalario().getSalarioNeto();
                fila[10] = sa.getNumPlanilla();
                fila[11] = sa.getMes() + "/" +sa.getAnio();
                modeloReportePlanilla.addRow(fila);
            }

        }
        jTable4.setModel(modeloReportePlanilla);
        jScrollPane7.setViewportView(jTable4);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox4, 0, 98, Short.MAX_VALUE)
                            .addComponent(jComboBox5, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox6, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 892, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton7)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Reporte de Planillas", jPanel5);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        jTabbedPane1.addTab("Reportes", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Cargar datos del archivo y tabla de empleados
        cargarDatosArchivo();
        cargarTablaEmpleados();

        // Obtener el valor de la entrada del usuario
        String strinputId = jTextField3.getText();

        // Validar que el valor ingresado sea un n칰mero entero
        if (!vali.esEntero(strinputId)) {
            // Mostrar un mensaje de error al usuario
            agregarLogEmpleado("Error: No ingres칩 un n칰mero entero v치lido");
            JOptionPane.showMessageDialog(null, "Error: n칰mero inv치lido", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar si el empleado existe en la lista de empleados
        if (vali.existeEmpleado(listaEmpleados, strinputId)) {
            // Si el empleado existe, obtener su informaci칩n y mostrarla en la interfaz
            tmpEmpleado = archivoEmpleados.obtenerEmpleado(listaEmpleados, Integer.parseInt(strinputId));
            jTextField3.setText(String.valueOf(tmpEmpleado.getIdEmpleado()));
            jTextField4.setText(String.valueOf(tmpEmpleado.getNombre()));
            jTextField7.setText(String.valueOf(tmpEmpleado.getApellidos()));
            jTextField8.setText(String.valueOf(tmpEmpleado.getEdad()));
            jTextField9.setText(String.valueOf(tmpEmpleado.getPuestoDesempenado()));
            jTextField10.setText(String.valueOf(tmpEmpleado.getFechaIngreso()));

            // Agregar un mensaje al registro de empleados indicando que se encontr칩 al empleado
            agregarLogEmpleado("Empleado con ID " + strinputId + " encontrado!");
        } else {
            // Si el empleado no existe, limpiar los campos de la interfaz
            jTextField4.setText("");
            jTextField7.setText("");
            jTextField8.setText("");
            jTextField9.setText("");
            jTextField10.setText("");

            // Agregar un mensaje al registro de empleados indicando que el empleado no existe
            agregarLogEmpleado("Empleado con ID " + strinputId + " no existe :,c");
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Boton modificar empleado

        // Carga los datos del archivo y actualiza la tabla de empleados
        cargarDatosArchivo();
        cargarTablaEmpleados();

        // Obtiene los valores de entrada del usuario para cada campo del empleado
        String strinputId = jTextField3.getText();
        String strinputNombre = jTextField4.getText();
        String strinputApellido = jTextField7.getText();
        String strinputEdad = jTextField8.getText();
        String strinputPuesto = jTextField9.getText();
        String strinputFecha = jTextField10.getText();

        // Verifica si todos los campos han sido llenados
        if (strinputId.isEmpty() || strinputNombre.isEmpty() || strinputApellido.isEmpty() || strinputEdad.isEmpty() || strinputPuesto.isEmpty() || strinputFecha.isEmpty()) {
            agregarLogEmpleado("Error: Debe llenar todos los campos");
            JOptionPane.showMessageDialog(null, "Error: Debe llenar todos los campos al agregar un nuevo empleado", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verifica si el ID ingresado es un n칰mero entero v치lido
        if (!vali.esEntero(strinputId)) {
            agregarLogEmpleado("Error: No ingres칩 un ID n칰mero entero v치lido");
            JOptionPane.showMessageDialog(null, "Error: ID es n칰mero inv치lido", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verifica si el empleado con el ID ingresado existe en la lista de empleados
        if (!vali.existeEmpleado(listaEmpleados, strinputId)) {
            agregarLogEmpleado("Error: Ingres칩 un empleado inexistente");
            JOptionPane.showMessageDialog(null, "Error: Ingres칩 un empleado inexistente", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verifica si la edad ingresada es un n칰mero entero positivo sin cero
        if (!vali.esEnteroPositivoCero(strinputEdad)) {
            agregarLogEmpleado("Error: No ingres칩 una edad v치lida");
            JOptionPane.showMessageDialog(null, "Error: No ingres칩 una edad v치lida", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verifica si la fecha ingresada es v치lida
        if (!vali.esFechaValida(strinputFecha)) {
            agregarLogEmpleado("Error: No ingres칩 una fecha v치lida");
            JOptionPane.showMessageDialog(null, "Error: No ingres칩 una fecha v치lida", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Crea un objeto empleado con los valores ingresados y modifica el empleado
        cEmpleado tmpEmpleado = new cEmpleado(Integer.parseInt(strinputId), strinputNombre, strinputApellido, Integer.parseInt(strinputEdad), strinputPuesto, parseFecha(strinputFecha));
        archivoEmpleados.modificarEmpleado(tmpEmpleado);

        // Se cargan los datos del archivo de empleados y se actualizan las tablas de salarios y empleados
        cargarDatosArchivo();
        cargarTablaSalarios();
        cargarTablaEmpleados();

        agregarLogEmpleado("Empleado con ID " + strinputId + " modificado 0:");


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Boton agregar empleado

        // Carga los datos del archivo
        cargarDatosArchivo();
        // Carga los empleados en la tabla
        cargarTablaEmpleados();

        // Obtiene los valores ingresados por el usuario en los campos de texto
        String strinputId = jTextField3.getText();
        String strinputNombre = jTextField4.getText();
        String strinputApellido = jTextField7.getText();
        String strinputEdad = jTextField8.getText();
        String strinputPuesto = jTextField9.getText();
        String strinputFecha = jTextField10.getText();

        // Verifica si todos los campos est치n llenos, si alguno est치 vac칤o, muestra un mensaje de error y termina la ejecuci칩n de este m칠todo
        if (strinputId.isEmpty() || strinputNombre.isEmpty() || strinputApellido.isEmpty() || strinputEdad.isEmpty() || strinputPuesto.isEmpty() || strinputFecha.isEmpty()) {
            // Agrega un mensaje de error al registro de eventos
            agregarLogEmpleado("Error: Debe llenar todos los campos");
            // Muestra un cuadro de di치logo con el mensaje de error
            JOptionPane.showMessageDialog(null, "Error: Debe llenar todos los campos al agregar un nuevo empleado", "Error", JOptionPane.ERROR_MESSAGE);
            // Termina la ejecuci칩n de este m칠todo
            return;
        }

        // Verifica si el ID ingresado es un n칰mero entero v치lido, si no lo es, muestra un mensaje de error y termina la ejecuci칩n de este m칠todo
        if (!vali.esEntero(strinputId)) {
            // Agrega un mensaje de error al registro de eventos
            agregarLogEmpleado("Error: No ingres칩 un ID n칰mero entero v치lido");
            // Muestra un cuadro de di치logo con el mensaje de error
            JOptionPane.showMessageDialog(null, "Error: ID es n칰mero inv치lido", "Error", JOptionPane.ERROR_MESSAGE);
            // Termina la ejecuci칩n de este m칠todo
            return;
        }

        // Verifica si el empleado ya existe en la lista de empleados, si existe, muestra un mensaje de error y termina la ejecuci칩n de este m칠todo
        if (vali.existeEmpleado(listaEmpleados, strinputId)) {
            // Agrega un mensaje de error al registro de eventos
            agregarLogEmpleado("Error: Ingres칩 un empleado existente");
            // Muestra un cuadro de di치logo con el mensaje de error
            JOptionPane.showMessageDialog(null, "Error: Ingres칩 un empleado existente", "Error", JOptionPane.ERROR_MESSAGE);
            // Termina la ejecuci칩n de este m칠todo
            return;
        }

        // Verifica si la edad ingresada es un n칰mero entero positivo sin contar cero, si no lo es, muestra un mensaje de error y termina la ejecuci칩n de este m칠todo
        if (!vali.esEnteroPositivoCero(strinputEdad)) {
            // Agrega un mensaje de error al registro de eventos
            agregarLogEmpleado("Error: No ingres칩 una edad v치lida");
            // Muestra un cuadro de di치logo con el mensaje de error
            JOptionPane.showMessageDialog(null, "Error: No ingres칩 una edad v치lida", "Error", JOptionPane.ERROR_MESSAGE);
            // Termina la ejecuci칩n de este m칠todo
            return;
        }

        if (!vali.esFechaValida(strinputFecha)) {
            // Si la validaci칩n de la fecha no es v치lida, se muestra un mensaje de error en el registro y una ventana emergente
            agregarLogEmpleado("Error: No ingres칩 una fecha v치lida");
            JOptionPane.showMessageDialog(null, "Error: No ingres칩 una fecha v치lida", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Se crea un nuevo objeto de la clase cEmpleado con los datos proporcionados y se guarda en el archivo de empleados
        cEmpleado tmpEmpleado = new cEmpleado(Integer.parseInt(strinputId), strinputNombre, strinputApellido, Integer.parseInt(strinputEdad), strinputPuesto, parseFecha(strinputFecha));
        archivoEmpleados.guardarEmpleado(tmpEmpleado);

        // Se cargan los datos del archivo de empleados y se actualizan las tablas de salarios y empleados
        cargarDatosArchivo();
        cargarTablaSalarios();
        cargarTablaEmpleados();

        // Se agrega un mensaje al registro indicando que se ha agregado un empleado con el ID especificado
        agregarLogEmpleado("Empleado con ID " + strinputId + " agregado :D");


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //Boton borrar empleado

        // Carga los datos del archivo y actualiza la lista de empleados.
        cargarDatosArchivo();
        cargarTablaEmpleados();

        // Obtiene el ID del empleado ingresado por el usuario.
        String strinputId = jTextField3.getText();

        // Verifica si se ingres칩 alg칰n ID.
        if (strinputId.isEmpty()) {
            agregarLogEmpleado("Error: No hay ning칰n ID");
            JOptionPane.showMessageDialog(null, "Error: Debe ingresar un ID", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verifica si el ID ingresado es un n칰mero entero v치lido.
        if (!vali.esEntero(strinputId)) {
            agregarLogEmpleado("Error: No ingres칩 un ID n칰mero entero v치lido");
            JOptionPane.showMessageDialog(null, "Error: ID es n칰mero inv치lido", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verifica si el empleado tiene salarios registrados.
        if (vali.tieneSalarios(listaSalario, Integer.parseInt(jTextField3.getText()))) {
            agregarLogEmpleado("Error: No se puede borrar un empleado que tenga salarios registrados");
            JOptionPane.showMessageDialog(null, "Error: Empleado con salarios registrados", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verifica si el empleado existe en la lista de empleados.
        if (vali.existeEmpleado(listaEmpleados, strinputId)) {
            // Elimina al empleado del archivo.
            archivoEmpleados.eliminarEmpleado(Integer.parseInt(strinputId));

            // Agrega una entrada en el registro de eventos.
            agregarLogEmpleado("Ha eliminado al empleado con ID " + strinputId);
        }

        // Actualiza los datos del archivo y las tablas de salarios y empleados.
        cargarDatosArchivo();
        cargarTablaSalarios();
        cargarTablaEmpleados();
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //Boton planilla por empleado:

        jLabel20.setText(""); //Se establece el texto de la etiqueta "jLabel20" como vac칤o
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        model.setRowCount(0); //Se establece el n칰mero de filas de la tabla "jTable3" como 0 para borrar cualquier informaci칩n previa.

        cargarDatosArchivo(); //Se carga la informaci칩n de los archivos en la aplicaci칩n.
        cargarTablaSalarios(); //Se carga la tabla de salarios con la informaci칩n actualizada.
        cargarTablaEmpleados(); //Se carga la tabla de empleados con la informaci칩n actualizada.

        String strinputId = jTextField11.getText(); //Se obtiene el ID ingresado por el usuario.

        if (strinputId.isEmpty()) { //Se verifica si el ID ingresado est치 vac칤o.
            JOptionPane.showMessageDialog(null, "Error: Debe ingresar un ID", "Error", JOptionPane.ERROR_MESSAGE); //Se muestra un mensaje de error si el ID est치 vac칤o.
            return; //Se sale del m칠todo si el ID est치 vac칤o.
        }

        if (!vali.esEntero(strinputId)) { //Se verifica si el ID ingresado es un n칰mero v치lido.
            JOptionPane.showMessageDialog(null, "Error: ID es n칰mero inv치lido", "Error", JOptionPane.ERROR_MESSAGE); //Se muestra un mensaje de error si el ID no es un n칰mero v치lido.
            return; //Se sale del m칠todo si el ID no es un n칰mero v치lido.
        }

        if (!vali.existeEmpleado(listaEmpleados, strinputId)) { //Se verifica si el empleado con el ID ingresado existe.
            JOptionPane.showMessageDialog(null, "Error: Empleado no existe", "Error", JOptionPane.ERROR_MESSAGE); //Se muestra un mensaje de error si el empleado con el ID ingresado no existe.
            return; //Se sale del m칠todo si el empleado con el ID ingresado no existe.
        }

        if (!vali.tieneSalarios(listaSalario, Integer.parseInt(jTextField11.getText()))) { //Se verifica si el empleado con el ID ingresado tiene salarios registrados.
            JOptionPane.showMessageDialog(null, "Error: Empleado no tiene salarios", "Error", JOptionPane.ERROR_MESSAGE); //Se muestra un mensaje de error si el empleado con el ID ingresado no tiene salarios registrados.
            return; //Se sale del m칠todo si el empleado con el ID ingresado no tiene salarios registrados.
        } else {
            //Empleado existe, hay que mostrar la planilla por empleado.

            cargarDatosArchivo(); //Se carga la informaci칩n de los archivos en la aplicaci칩n.

            //Info empleado
            cEmpleado empleado = archivoEmpleados.obtenerEmpleado(listaEmpleados, Integer.parseInt(jTextField11.getText())); //Se obtiene la informaci칩n del empleado con el ID ingresado.

            jLabel20.setText(empleado.toStringReporte()); //Se establece el texto de la etiqueta "jLabel20" con la informaci칩n del empleado.

            cargarTablaReporte(Integer.parseInt(jTextField11.getText())); //Se carga la tabla de reporte con la informaci칩n del empleado.

        }

        cargarDatosArchivo(); //Se carga la informaci칩n de los archivos en la aplicaci칩n.
        cargarTablaSalarios(); //Se carga la tabla de salarios con la informaci칩n actualizada.
        cargarTablaEmpleados(); //Se carga la tabla de empleados con la informaci칩n actualizada.


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        //Boton reporte planilla especifica

        // Obtiene el modelo de tabla actual y lo establece en 0
        DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
        model.setRowCount(0);

        // Carga los datos del archivo en las listas correspondientes
        cargarDatosArchivo();

        // Carga la tabla de salarios en la interfaz gr치fica
        cargarTablaSalarios();

        // Carga la tabla de empleados en la interfaz gr치fica
        cargarTablaEmpleados();

        // Obtiene los valores de los campos de selecci칩n de planilla, mes y a침o y los convierte en enteros
        int intPlanilla = Integer.parseInt(jComboBox4.getSelectedItem().toString());
        int intMes = Integer.parseInt(jComboBox5.getSelectedItem().toString());
        int intAnio = Integer.parseInt(jComboBox6.getSelectedItem().toString());

        // Crea una nueva instancia de cPlanilla con los valores de selecci칩n
        cPlanilla planilla = new cPlanilla(intPlanilla, intMes, intAnio);

        // Verifica si la planilla seleccionada existe en la lista de salarios
        if (!vali.existePlanilla(listaSalario, planilla)) {
            // Si la planilla no existe, muestra un mensaje de error y retorna
            JOptionPane.showMessageDialog(null, "Error: No existe esa planilla en el sistema", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            // Si la planilla existe, carga los datos del archivo nuevamente
            cargarDatosArchivo();

            // Carga la tabla de reporte de planilla por empleado en la interfaz gr치fica
            cargarTablaReportePlanilla(intPlanilla, intMes, intAnio);
        }

        // Carga los datos del archivo en las listas correspondientes nuevamente
        cargarDatosArchivo();

        // Carga la tabla de salarios en la interfaz gr치fica nuevamente
        cargarTablaSalarios();

        // Carga la tabla de empleados en la interfaz gr치fica nuevamente
        cargarTablaEmpleados();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        //Boton agregar salario

        // Cargar los datos del archivo y actualizar la tabla de salarios
        cargarDatosArchivo();
        cargarTablaSalarios();

        // Obtener el valor ingresado en el campo de texto jTextField1
        String strinputId = jTextField1.getText();

        // VERIFICAR ID
        // Verificar que se haya ingresado un ID v치lido
        if (strinputId.isEmpty()) {
            agregarLogSalario("Error: No hay ning칰n ID");
            JOptionPane.showMessageDialog(null, "Error: Debe ingresar un ID", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar que el ID ingresado sea un n칰mero entero v치lido
        if (!vali.esEntero(strinputId)) {
            agregarLogSalario("Error: No ingres칩 un ID n칰mero entero v치lido");
            JOptionPane.showMessageDialog(null, "Error: ID es n칰mero inv치lido", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar que el ID ingresado corresponda a un empleado existente en la lista de empleados
        if (!vali.existeEmpleado(listaEmpleados, strinputId)) {
            agregarLogSalario("Error: Ingres칩 un empleado inexistente");
            JOptionPane.showMessageDialog(null, "Error: Ingres칩 un empleado inexistente", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Alguno invalido
        // Declarar e inicializar las variables ahorroNavideno y otrosRebajos
        double ahorroNavideno = 0, otrosRebajos = 0;

        // Verificar que el campo de salario no est칠 vac칤o
        if (jTextField2.getText().isEmpty()) {
            agregarLogSalario("Error: No se ha ingresado un salario");
            JOptionPane.showMessageDialog(null, "Error: No se ha ingresado un salario", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Obtener los valores de los componentes

            // Obtener el valor ingresado en el campo de texto jTextField2 y convertirlo a tipo double
            double salario = Double.parseDouble(jTextField2.getText());

            // Obtener los valores de las casillas de verificaci칩n jCheckBox1 y jCheckBox2
            boolean asociacionSolidarista = jCheckBox1.isSelected();
            boolean cooperativa = jCheckBox2.isSelected();

            // Verificar si se ingres칩 un valor para el ahorro navide침o y otros rebajos
            if (!jTextField5.getText().isEmpty()) {
                // Convertir el valor ingresado en el campo de texto jTextField5 a tipo double
                ahorroNavideno = Double.parseDouble(jTextField5.getText());
            }
            if (!jTextField6.getText().isEmpty()) {
                // Convertir el valor ingresado en el campo de texto jTextField6 a tipo double
                otrosRebajos = Double.parseDouble(jTextField6.getText());
            }

            // Crear un objeto de la clase cSalarios_Deducciones_Voluntarias y calcular el salario neto
            cSalario_Deducciones_Voluntarias cSalarioNuevo = new cSalario_Deducciones_Voluntarias(salario, asociacionSolidarista, cooperativa, ahorroNavideno, otrosRebajos);

            // Crear un objeto de la clase Salario con los datos ingresados y el salario neto calculado
            Salario salarioNuevo = new Salario(Integer.parseInt(jTextField1.getText()), cSalarioNuevo, Integer.parseInt(jComboBox1.getSelectedItem().toString()), Integer.parseInt(jComboBox2.getSelectedItem().toString()), Integer.parseInt(jComboBox3.getSelectedItem().toString()));

            // Agregar el salario a archivo
            archivoSalarios.guardarSalario(salarioNuevo);

        } catch (Exception error) {
            // Captura cualquier excepci칩n que se genere en el bloque try-catch y la maneja
            // Imprime un mensaje en la consola que indica que ocurri칩 un error y muestra su descripci칩n
            System.out.println("Ocurri칩 un error: " + error.getMessage());

            // Agrega un registro al archivo de registro de salarios que indica que se produjo un error
            agregarLogSalario("Error: Ha ingresado un n칰mero inv치lido");

            // Muestra un cuadro de di치logo con un mensaje de error para informar al usuario que se produjo un error
            JOptionPane.showMessageDialog(null, "Error: N칰mero invalido", "Error", JOptionPane.ERROR_MESSAGE);

            // Retorna de inmediato para salir de la funci칩n, dado que se produjo un error
            return;
        }

        cargarDatosArchivo();
        cargarTablaSalarios();

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTabbedPane1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTabbedPane1ComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane1ComponentShown

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // Este m칠todo se ejecuta cuando cambia el estado de jTabbedPane1, que es un componente de pesta침as.

        //ACTUALIZAR DATOS
        // Llamamos al m칠todo cargarDatosArchivo para cargar los datos del archivo.
        cargarDatosArchivo();

        // Llamamos al m칠todo cargarTablaSalarios para cargar los datos de la tabla de salarios.
        cargarTablaSalarios();

        // Llamamos al m칠todo cargarTablaEmpleados para cargar los datos de la tabla de empleados.
        cargarTablaEmpleados();

    }//GEN-LAST:event_jTabbedPane1StateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainInterfaz mainInterfaz = new MainInterfaz();

                ImageIcon icono = new ImageIcon("icon.png");
                mainInterfaz.setIconImage(icono.getImage());

                mainInterfaz.setTitle("CalcuSalariosPro");
                // Calculamos la posici칩n en x e y para centrar la ventana
                int x = (Toolkit.getDefaultToolkit().getScreenSize().width - mainInterfaz.getWidth()) / 2;
                int y = (Toolkit.getDefaultToolkit().getScreenSize().height - mainInterfaz.getHeight()) / 2;
                mainInterfaz.setLocation(x, y);
                mainInterfaz.setVisible(true);
            }
        });
    }
    
    public void agregarLogEmpleado(String msg) {

        // Restablece el color de fuente a su valor predeterminado
        jTextArea1.setForeground(UIManager.getColor("text"));

        // Agrega otro mensaje de registro normal
        jTextArea1.append(msg + "\n");
    }

    public void agregarLogSalario(String msg) {

        // Restablece el color de fuente a su valor predeterminado
        jTextArea3.setForeground(UIManager.getColor("text"));

        // Agrega otro mensaje de registro normal
        jTextArea3.append(msg + "\n");
    }

    private void cargarDatosArchivo() {
        listaSalario = archivoSalarios.cargarSalarios();

        listaEmpleados = archivoEmpleados.cargarEmpleados();
    }

    public void cargarTablaEmpleados() {
        // Crear un modelo de tabla
        DefaultTableModel modeloTabla = new DefaultTableModel();

        // Agregar las columnas al modelo de tabla
        modeloTabla.addColumn("Id Empleado");
        modeloTabla.addColumn("Nombre");
        modeloTabla.addColumn("Apellidos");
        modeloTabla.addColumn("Edad");
        modeloTabla.addColumn("Puesto");
        modeloTabla.addColumn("Fecha Ingreso");

        // Agregar las filas al modelo de tabla
        // Cargar los datos de los empleados en la tabla
        for (cEmpleado empleado : listaEmpleados) {
            Object[] fila = new Object[6];
            fila[0] = empleado.getIdEmpleado();
            fila[1] = empleado.getNombre();
            fila[2] = empleado.getApellidos();
            fila[3] = empleado.getEdad();
            fila[4] = empleado.getPuestoDesempenado();
            fila[5] = empleado.getFechaIngreso().toString();
            modeloTabla.addRow(fila);
        }

        jTable1.setModel(modeloTabla);

        // Notificar a la tabla de que ha habido cambios en los datos
        modeloTabla.fireTableDataChanged();
    }

    private void cargarTablaSalarios() {
        // Crear un modelo de tabla
        DefaultTableModel modelo = new DefaultTableModel();

        // Agregar las columnas al modelo de tabla
        modelo.addColumn("Id Empleado");
        modelo.addColumn("Salario Bruto");
        modelo.addColumn("CCSS 5.5%");
        modelo.addColumn("BP 1%");
        modelo.addColumn("Impuesto");
        modelo.addColumn("Ahorro Aso. 3%");
        modelo.addColumn("Cooperativa 1%");
        modelo.addColumn("% Navide침o");
        modelo.addColumn("Otros Rebajos");
        modelo.addColumn("Salario Neto");
        modelo.addColumn("Planilla");
        modelo.addColumn("Mes/A침o");

        // Agregar las filas al modelo de tabla
        // Cargar los datos de los empleados en la tabla
        for (Salario sa : listaSalario) {
            Object[] fila = new Object[12];
            fila[0] = sa.getIdEmpleado();
            fila[1] = sa.getObjSalario().getSalarioBruto();
            fila[2] = sa.getObjSalario().getDeduccionCuotaSS();
            fila[3] = sa.getObjSalario().getDeduccionAhorroBP();
            fila[4] = sa.getObjSalario().getDeduccionImpuestoRenta();
            fila[5] = sa.getObjSalario().getAsociacionSolidarista();
            fila[6] = sa.getObjSalario().getCooperativa();
            fila[7] = sa.getObjSalario().getAhorroNavideno();
            fila[8] = sa.getObjSalario().getOtrosRebajos();
            fila[9] = sa.getObjSalario().getSalarioNeto();
            fila[10] = sa.getNumPlanilla();
            fila[11] = sa.getMes() + "/" + sa.getAnio();
            modelo.addRow(fila);
        }
        jTable2.setModel(modelo);

        // Notificar a la tabla de que ha habido cambios en los datos
        modelo.fireTableDataChanged();
    }

    private void cargarTablaReporte(int idSolicitado) {

        // Crear un modelo de tabla
        DefaultTableModel modelo = new DefaultTableModel();

        //ID solicitado
        //int idSolicitado = 212121;
        // Agregar las columnas al modelo de tabla
        modelo.addColumn("Id Empleado");
        modelo.addColumn("Salario Bruto");
        modelo.addColumn("CCSS 5.5%");
        modelo.addColumn("BP 1%");
        modelo.addColumn("Impuesto");
        modelo.addColumn("Ahorro Aso. 3%");
        modelo.addColumn("Cooperativa 1%");
        modelo.addColumn("% Navide침o");
        modelo.addColumn("Otros Rebajos");
        modelo.addColumn("Salario Neto");
        modelo.addColumn("Planilla");
        modelo.addColumn("Mes/A침o");

        // Agregar las filas al modelo de tabla
        // Cargar los datos de los empleados en la tabla
        for (Salario sa : listaSalario) {
            if (sa.getIdEmpleado() == idSolicitado) {
                Object[] fila = new Object[12];
                fila[0] = sa.getIdEmpleado();
                fila[1] = sa.getObjSalario().getSalarioBruto();
                fila[2] = sa.getObjSalario().getDeduccionCuotaSS();
                fila[3] = sa.getObjSalario().getDeduccionAhorroBP();
                fila[4] = sa.getObjSalario().getDeduccionImpuestoRenta();
                fila[5] = sa.getObjSalario().getAsociacionSolidarista();
                fila[6] = sa.getObjSalario().getCooperativa();
                fila[7] = sa.getObjSalario().getAhorroNavideno();
                fila[8] = sa.getObjSalario().getOtrosRebajos();
                fila[9] = sa.getObjSalario().getSalarioNeto();
                fila[10] = sa.getNumPlanilla();
                fila[11] = sa.getMes() + "/" + sa.getAnio();
                modelo.addRow(fila); // Agrega la fila al modelo de tabla
            }

        }
        jTable3.setModel(modelo); // Establece el modelo de tabla en la jTable3
    }

    private void cargarTablaReportePlanilla(int planillaSoli, int mesSoli, int anioSoli) {

        // Crear un modelo de tabla
        DefaultTableModel modelo = new DefaultTableModel();

        // Agregar las columnas al modelo de tabla
        modelo.addColumn("Id Empleado");
        modelo.addColumn("Salario Bruto");
        modelo.addColumn("CCSS 5.5%");
        modelo.addColumn("BP 1%");
        modelo.addColumn("Impuesto");
        modelo.addColumn("Ahorro Aso. 3%");
        modelo.addColumn("Cooperativa 1%");
        modelo.addColumn("% Navide침o");
        modelo.addColumn("Otros Rebajos");
        modelo.addColumn("Salario Neto");
        modelo.addColumn("Planilla");
        modelo.addColumn("Mes/A침o");

        // Agregar las filas al modelo de tabla
        // Cargar los datos de los empleados en la tabla
        for (Salario sa : listaSalario) {
            // Filtrar los salarios de acuerdo a la planilla, mes y a침o solicitados
            if ((sa.getNumPlanilla() == planillaSoli) && (sa.getMes() == mesSoli) && (sa.getAnio() == anioSoli)) {
                // Crear una fila con los datos del salario
                Object[] fila = new Object[12];
                fila[0] = sa.getIdEmpleado();
                fila[1] = sa.getObjSalario().getSalarioBruto();
                fila[2] = sa.getObjSalario().getDeduccionCuotaSS();
                fila[3] = sa.getObjSalario().getDeduccionAhorroBP();
                fila[4] = sa.getObjSalario().getDeduccionImpuestoRenta();
                fila[5] = sa.getObjSalario().getAsociacionSolidarista();
                fila[6] = sa.getObjSalario().getCooperativa();
                fila[7] = sa.getObjSalario().getAhorroNavideno();
                fila[8] = sa.getObjSalario().getOtrosRebajos();
                fila[9] = sa.getObjSalario().getSalarioNeto();
                fila[10] = sa.getNumPlanilla();
                fila[11] = sa.getMes() + "/" + sa.getAnio();
                // Agregar la fila al modelo de tabla
                modelo.addRow(fila);
            }
        }
        // Establecer el modelo de tabla en la tabla correspondiente
        jTable4.setModel(modelo);
    }

    public static LocalDate parseFecha(String fechaString) throws DateTimeParseException {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate fecha = LocalDate.parse(fechaString, formatter);
        return fecha;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox5;
    private javax.swing.JComboBox<String> jComboBox6;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
